using MelonLoader;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC;
using VRC.SDKBase;
using static HellsingPc.Misc.Config;
namespace HellsingPc.Exploits
{
    internal class Fly
    {
        internal static Camera cameraeye;
        public static Vector3 originalGravity = Physics.gravity;
        public float flyspeed = .25f;
        public static void fly()
        {
            
            if (VRC.Player.prop_Player_0 == null) return;
            float flyspeed = .25f;
            if (Misc.Config.Fly == true)
            {
                if (Player.prop_Player_0.field_Private_VRCPlayerApi_0.IsUserInVR())
                {
                    if (Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical") < 0f)
                        VRC.Player.prop_Player_0.transform.position -= VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.up * flyspeed;

                    if (Input.GetAxis("Oculus_CrossPlatform_SecondaryThumbstickVertical") > 0f)
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.up * flyspeed;

                    if (Input.GetAxis("Vertical") != 0f)
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.forward * (flyspeed * Input.GetAxis("Vertical"));

                    if (Input.GetAxis("Horizontal") != 0f)
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.right * (flyspeed * Input.GetAxis("Horizontal"));
                    Networking.LocalPlayer.SetVelocity(Vector3.zero);
                }
                else 
                {
                    if (Input.GetKey(KeyCode.W))
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.forward * flyspeed;

                    if (Input.GetKey(KeyCode.S))
                        VRC.Player.prop_Player_0.transform.position -= VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.forward * flyspeed;

                    if (Input.GetKey(KeyCode.A))
                        VRC.Player.prop_Player_0.transform.position -= VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.right * (flyspeed);

                    if (Input.GetKey(KeyCode.D))
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.right * (flyspeed);

                    if (Input.GetKey(KeyCode.Q))
                        VRC.Player.prop_Player_0.transform.position -= VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.up * (flyspeed / 4);

                    if (Input.GetKey(KeyCode.E))
                        VRC.Player.prop_Player_0.transform.position += VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.up * (flyspeed / 4);
                    Networking.LocalPlayer.SetVelocity(Vector3.zero);
                }

                return;
            }              
        }
           
        public static void togglefly(bool value)
        {

            if (value)
            {
                Player.prop_Player_0.gameObject.GetComponent<CharacterController>().enabled = true;
                Physics.gravity = originalGravity;
                Misc.Config.Fly = false;
            }
            else
            {
                Player.prop_Player_0.gameObject.GetComponent<CharacterController>().enabled = false;
                Physics.gravity = Vector3.zero;
                Misc.Config.Fly = true;
            }
        }
    }
}
