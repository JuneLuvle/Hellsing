using MelonLoader;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon.Common.Interfaces;
using VRC.Udon;
using VRC;
using HellsingPc.Misc;
using VRC.SDK3.Components;
using Photon.Realtime;

namespace HellsingPc.Exploits
{
    public class Orbit
    {
        public static VRC_Pickup[] pickups;

        public static float speed = 2f;


        public static float distance = 1f;


        public static float height = 1f;


        public static float _speed = 2f;


        public static float _distance = 0f;


        public static float _height = 1.5f;


        public static void ToggleOrbit(bool value)
        {
            if (Main.orbit == true)
            {
                Main.orbit = false;
                HellsingPc.Exploits.Orbit.Orbits();
            }
            else
               if (Main.orbit == false)
            {
                Main.orbit = true;
                HellsingPc.Exploits.Orbit.Orbits();
            }
        }

        public static void ToggleFaceOrb(bool value)
        {
            if (Main.faceorb == true)
            {
                Main.faceorb = false;
                HellsingPc.Exploits.Orbit.FaceOrbit();
            }
            else
               if (Main.faceorb == false)
            {
                Main.faceorb = true;
                HellsingPc.Exploits.Orbit.FaceOrbit();
            }
        }

        public static void Orbits()
        {

            foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                VRCPickup.transform.position = IUserExtension.SelectedVRCPlayer().transform.position + new Vector3(Mathf.Sin(Time.time * speed) * distance, height, Mathf.Cos(Time.time * speed ) * distance);
            }
        }

        public static void FaceOrbit()
        {

            foreach (VRC_Pickup VRCPickup in UnityEngine.Object.FindObjectsOfType<VRC_Pickup>())
            {
                VRCPickup.transform.position = IUserExtension.SelectedVRCPlayer().transform.position + new Vector3(Mathf.Sin(Time.time * _speed) * _distance, _height, Mathf.Cos(Time.time * _speed) * _distance);
            }
        }
    }
}
