using MelonLoader;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*using HellsingPc.Misc.IUserExstentions;*/
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon.Common.Interfaces;
using VRC.Udon;
using VRC;
using HellsingPc.Misc;

namespace HellsingPc.Exploits.WorldHacks
{
    internal static class Murder4
    {

        public static void Murder4KillAll()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "KillLocalPlayer");
        }

        public static void Murder4WinM()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncVictoryM");
        }

        public static void Murder4WinB()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncVictoryB");
        }

        public static void Murder4Start()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncStart");
        }

        public static void Murder4Abort()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "SyncAbort");
        }


        public static void Murder4SeeInDark()
        {
            GameObject.Find("Game Logic").GetComponent<UdonBehaviour>().SendCustomNetworkEvent(0, "ShowNametagsInDarkness");
        }



        #region Target
        public static void Murder4TargetKill()
        {
            TargeteEvent("SyncKill", IUserExtension.SelectedVRCPlayer());
        }

        public static void Murder4TargetFlash()
        {
            TargeteEvent("SyncFlashbang", IUserExtension.SelectedVRCPlayer());
        }

        public static void Murder4AssignB()
        {
            TargeteEvent("SyncAssignB", IUserExtension.SelectedVRCPlayer());
        }

        public static void Murder4AssignM()
        {
            TargeteEvent("SyncAssignM", IUserExtension.SelectedVRCPlayer());
        }

        public static void Murder4AssignD()
        {
            TargeteEvent("SyncAssignD", IUserExtension.SelectedVRCPlayer());
        }

        public static void Murder4FinishClues()
        {
            TargeteEvent("SyncCluesFinished", IUserExtension.SelectedVRCPlayer());
        }
        public static void TargeteEvent(string udonevent, Player player)
        {
            GameObject gameObject = GameObject.Find("Player Nodes");
            foreach (Transform componentsInChild in gameObject.GetComponentsInChildren<Transform>())
            {
                if (componentsInChild.name != gameObject.name)
                    componentsInChild.gameObject.Udonsend(udonevent, player);
            }
        }




        public static void Udonsend(this GameObject gameObject, string udonEvent, Player player = null, bool componetcheck = false)
        {
            UdonBehaviour component = gameObject.GetComponent<UdonBehaviour>();
            if (!(player != null))
            {
                if (componetcheck)
                    return;
                if (player == VRCPlayer.field_Internal_Static_VRCPlayer_0._player)
                    component.SendCustomEvent(udonEvent);
                else
                    component.SendCustomNetworkEvent(0, udonEvent);
            }
            else
            {
                gameObject.SetEventOwner(player);
                component.SendCustomNetworkEvent(NetworkEventTarget.Owner, udonEvent);
            }
        }
        public static void SetEventOwner(this GameObject gameObject, Player player)
        {
            if (!(gameObject.GrabOwner() != player))
                return;
            Networking.SetOwner(player.field_Private_VRCPlayerApi_0, gameObject);
        }

        public static Player GrabOwner(this GameObject gameObject)
        {
            foreach (Player player in PlayerManager.field_Private_Static_PlayerManager_0.field_Private_List_1_Player_0)
            {
                if (player.field_Private_VRCPlayerApi_0.IsOwner(gameObject))
                    return player;
            }
            return null;
        }
        #endregion

    }
}
